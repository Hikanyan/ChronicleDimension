@startuml

class BootLoader{
    -sequenceManager:SequenceManager
}
class SequenceManager{
    +Initialize():void
    -InstantiatePreloadedAssets:void
}
abstract class AbstractSingleton<T> {
  +Instance: T
  #Awake(): void
  #OnAwake(): void
}
abstract class AbstractSingleton<T>
Class StateMachine<TOwner> {
  -states: LinkedList<State>
  -CurrentState: State
  +Owner: TOwner
  +StateMachine(owner: TOwner)
  +Add<T>(): T
  +GetOrAddState<T>(): T
  +AddTransition<TFrom, TTo>(eventId: int)
  +AddAnyTransition<TTo>(eventId: int)
  +Start<TFirst>()
  +Start(firstState: State)
  +Update()
  +Dispatch(eventId: int)
  -Change(nextState: State)
}

abstract class State {
  -stateMachine: StateMachine<TOwner>
  -transitions: Dictionary<int, State>
  +StateMachine: StateMachine<TOwner>
  +Owner: TOwner
  +Enter(prevState: State)
  +OnEnter(prevState: State)
  +Update()
  +OnUpdate()
  +Exit(nextState: State)
  +OnExit(nextState: State)
}

class GameManager {
 -rhythmGameManager:RhythmGameManager
 -gachaManager:GachaManager
}
class RhythmGameManager{

}
class ScoreManager{

}
class CRIAudioManager{

}
class ParticleManager{

}
class SceneController{

}
class TimeManager{

}
class InputManager{

}
class JudgeManager{

}
class NotesManager{

}
class UIManager{

}
class EventManager{

}
class GachaManager{

}
class NotesGenerator{

}
class NotesController{

}

class Player{

}
class Notes{

}
class Song{

}
class Item{

}
class Inventory{

}
class Character{

}


BootLoader <|-- SequenceManager
StateMachine <|-- State

GameManager <|-- RhythmGameManager

RhythmGameManager <|-- ScoreManager
RhythmGameManager <|-- CRIAudioManager
RhythmGameManager <|-- ParticleManager
RhythmGameManager <|-- SceneController
RhythmGameManager <|-- TimeManager
RhythmGameManager <|-- InputManager
RhythmGameManager <|-- JudgeManager
RhythmGameManager <|-- NotesManager
RhythmGameManager <|-- UIManager
RhythmGameManager <|-- EventManager

Player<|-- InputManager
Player<|-- Inventory
Player<|-- Character

NotesManager  <|-- NotesGenerator
NotesManager  <|-- NotesController

NotesGenerator <|-- Notes
NotesController <|-- Notes

CRIAudioManager<|--Song

GachaManager <|-- Item

@enduml

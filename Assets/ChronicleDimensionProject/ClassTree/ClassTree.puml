@startuml

skinparam packageStyle rect
skinparam monochrome true

package Core {
    class BootLoader {
        -sequenceManager: SequenceManager
    }

    class SequenceManager {
        +Initialize(): void
        -InstantiatePreloadedAssets: void
    }

    class GameManager {
        -rhythmGameManager: RhythmGameManager
        -actionGameManager: ActionGameManager
        -novelGameManager: NovelGameManager
        -gachaManager: GachaManager
        -sceneController: SceneController
        -audioManager: CRIAudioManager
        -saveManager: SaveManager
        -uiManager: UIManager
        -stateMachine: StateMachine<GameManager>
    }

    BootLoader o-- SequenceManager
    SequenceManager o-- GameManager
}

package Singleton {
    class AbstractSingleton<T> {
        -_instance: static T
        +Instance: T {get}
        +Awake(): void
        +OnAwake(): void
        +Delete(): void
    }

    class MonoBehaviour {
        ' UnityのMonoBehaviour
    }

    AbstractSingleton -|> MonoBehaviour
    note right of AbstractSingleton
      サブクラスのシングルトンの振る舞いを提供。
    end note
}

package "State Pattern" {
    class StateMachine<TOwner> {
        -states: LinkedList<State>
        -currentState: State
        +Owner: TOwner
        +StateMachine(owner: TOwner)
        +Add<T>(): T
        +GetOrAddState<T>(): T
        +AddTransition<TFrom, TTo>(eventId: int)
        +AddAnyTransition<TTo>(eventId: int)
        +Start<TFirst>()
        +Start(firstState: State)
        +Update()
        +Dispatch(eventId: int)
        -Change(nextState: State)
    }

    abstract class State {
        -stateMachine: StateMachine<TOwner>
        -transitions: Dictionary<int, State>
        +StateMachine: StateMachine<TOwner>
        +Owner: TOwner
        +Enter(prevState: State)
        +OnEnter(prevState: State)
        +Update()
        +OnUpdate()
        +Exit(nextState: State)
        +OnExit(nextState: State)
    }

    StateMachine <|-- State
}

package "MVRP Pattern" {
    class UIManager {
        -uiPrefab: GameObject
        -uiDictionary: Dictionary<string, GameObject>
        
        +OnAwake(): void
        +AddUI<T>(uiPrefab: GameObject): UniTask where T : UIBase
        +OpenUI<T>(): UniTask where T : UIBase
        +CloseUI<T>(): void where T : UIBase
        -InstantiateUI(uiName: string): UniTask<GameObject>
        -InstantiateUI(uiName: string, uiPrefab: GameObject): UniTask<GameObject>
    }

    class Model {
        +data: DataStructure
        +GetData(): DataStructure
        +SetData(data: DataStructure)
    }

    class View {
        +UpdateView()
        +UserInputReceived()
    }



    class Presenter {
        +HandleUserInput()
        +UpdateView()
    }

    UIManager -down-> Presenter : <<初期化>>
    Presenter -down-> View : <<更新>>
    Presenter .down.> Model : <<更新>>
     
    
}




package RhythmGame {
    class RhythmGameManager {
        -scoreManager: ScoreManager
        -particleManager: ParticleManager
        -timeManager: TimeManager
        -inputManager: InputManager
        -judgeManager: JudgeManager
        -notesManager: NotesManager
        -eventManager: EventManager
        -stateMachine: StateMachine<RhythmGameManager>
    }

    class NotesManager {
        -generator: NotesGenerator
        -controller: NotesController
    }

    GameManager o-- RhythmGameManager
    RhythmGameManager o-- NotesManager
}

package ActionGame {
    class ActionGameManager {
        -stageManager: StageManager
        -enemyManager: EnemyManager
        -playerManager: PlayerManager
        -stateMachine: StateMachine<ActionGameManager>
    }

    GameManager o-- ActionGameManager
}

package NovelGame {
    class NovelGameManager {
        -episodeManager: EpisodeManager
        -stateMachine: StateMachine<NovelGameManager>
    }

    GameManager o-- NovelGameManager
}

package Data {
    
}

@enduml
@startuml

skinparam packageStyle rect
skinparam monochrome true

package "Rhythm Game Architecture" {

    package "Game Management" {
        class RhythmGameManager {
            +StartGame()
            +PauseGame()
            +EndGame()
        }
        class PauseController
        class ResultManager {
            +ShowResults()
        }
    }

    package "Game Core" {
        class NotesManager {
            +GenerateNotes()
            +ManageNotes()
        }
        class ScoreManager {
            +UpdateScore()
            +UpdateCombo()
        }
        class TimerManager {
            +StartTimer()
            +StopTimer()
        }
        
        class JudgeManager {
            +JudgeNote()
        }
        class NotesGenerator {
            +GenerateNotes(): List<Notes>
        }
        class NotesController {
            +ControlNotes(notes: List<Notes>)
        }
        class NotesFactory {
            +createNote(type: NoteType): Notes
        }
        
        abstract class Notes {
            +play(): void
            +display(): void
            +hit(): void
        }
        
        class NormalNote extends Notes {
            +play(): void
            +display(): void
            +hit(): void
        }
        
        class LongNote extends Notes {
            +play(): void
            +display(): void
            +hit(): void
        }
        
        class SlideNote extends Notes {
            +play(): void
            +display(): void
            +hit(): void
        }
        
        enum NoteType {
            NORMAL
            LONG
            SLIDE
        }
    }

    package "Data" {
        class SaveLoadManager {
            +SaveData()
            +LoadData()
        }
        class DataStorage {
            +SaveData()
            +LoadData()
        }
        class MusicData{
            +LoadMusicData()
        }
        class ResultDatas{
            +SaveResultData()
            +LoadResultData()
        }
    }

    package "Audio" {
        class CRIAudioManager {
            +PlayMusic()
            +StopMusic()
        }
    }

    package "Visuals" {
        class ParticleManager {
            +TriggerEffect()
        }
    }

    package "Input" {
        class InputInterface {
            +ReceiveInput()
        }
        class Player {
            +UpdateState()
        }
    }

    RhythmGameManager -down-> NotesManager : Uses
    RhythmGameManager -down-> ScoreManager : Uses
    RhythmGameManager -down-> TimerManager : Uses
    RhythmGameManager -down-> CRIAudioManager : Uses
    RhythmGameManager -down-> ParticleManager : Uses
    RhythmGameManager -down-> InputInterface : Uses
    RhythmGameManager -down-> Player : Uses
    RhythmGameManager -down-> PauseController : Uses
    RhythmGameManager -down-> ResultManager : Uses
    RhythmGameManager -down-> JudgeManager : Uses

    NotesManager -down-> NotesController : Controls
    NotesManager -down-> NotesFactory : Uses
    NotesManager -down-> NotesGenerator : Uses
    NotesGenerator -down-> SaveLoadManager : Uses
    NotesController -down-> Notes : Controls
    NotesFactory -down-> Notes : Creates
    
    SaveLoadManager -down-> DataStorage : Uses
    SaveLoadManager -down-> MusicData : Uses
    SaveLoadManager -down-> ResultDatas : Uses
    ResultManager -down-> SaveLoadManager : Uses
    
}

@enduml



なぜ: 
複数のミニゲームの体験を一つのプラットフォームで提供し、プレイヤーに多様なゲーム体験を提供するため。

どうやって: 
以下の主要要素を持つミニゲームを開発・統合する。

何を:

リズムゲームの実装
- 主要要素リスト:
    - プレイヤー: 叩く、リアクション
        - 初期スキル
        - パラメータ上昇
        - アウトゲームでのアップグレード
    - ノーツ: 動き、反応
        - 線を超えるとダメージ
    - 経験値: リザルト画面での表示
        - レベルアップ時の報酬や強化
    - スキル:
        - スコアアップ
        - 強制終了
        - HP回復
    - アイテム: ゲーム中の使用や効果
    - イベント: 特定の時間や条件下での挑戦
    - レベルアップ:
        - スキルのアップグレード
        - プレイヤーパラメータの向上
    - レベル: 難易度やノーツのバリエーション
    
アクションゲームの実装
- 主要要素リスト:
    - プレイヤー: 動き、戦闘、探索
        - 初期スキル
        - パラメータ上昇
        - アウトゲームでのアップグレード
    - 敵: 動き、攻撃
        - 種類や強さのバリエーション
        - ドロップアイテムや経験値
    - アイテム: 収集や使用
    - ステージ: レベルや環境のバリエーション
    - クエスト: 目的や報酬

ノベルゲームの実装
- 主要要素のリスト:
    - プレイヤー: 選択、読み進め
        - パラメータ上昇
    - キャラクター: 会話、選択
        - ドロップアイテムや経験値
    


シングルトンパターンを用いて、各要素を一つのクラスで管理する。
使われない場合はデストロイする。デストロイする前に、データを保存する。
再度使われる場合は、クラスを再生成する。データを読み込む。



オブジェクト指向

MVRPパターン(UI)

デザインパターン
Singleton(GameManager)
Observer(UI)
Factory(ノーツの生成)
state(それぞれのゲームの状態、Playerの状態)
command(ノーツの動き ユーザの入力)
